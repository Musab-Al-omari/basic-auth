// 'use strict';

// // 3rd Party Resources
// const express = require('express');
// const bcrypt = require('bcrypt'); //to becrypt out request

// const base64 = require('base-64'); // to encode our user name
// // let string = 'username:mousab'
// // let encoded = base64.encode(string)
// // let decoded = base64.decode(encoded)
// let UsermModle = require('../models/user')
//   // let password = '123451234512345'
// const mongoose = require('mongoose');

// // Prepare the express app
// const app = express();

// // Process JSON input and put the data on req.body
// app.use(express.json());

// // Process FORM intput and put the data on req.body
// app.use(express.urlencoded({ extended: true }));

// // Create a mongoose model
// const usersSchema = mongoose.Schema({
//   username: { type: String, required: true },
//   password: { type: String, required: true },
// });
// const Users = mongoose.model('users', usersSchema);

// // Signup Route -- create a new user
// // Two ways to test this route with httpie
// // echo '{"username":"john","password":"foo"}' | http post :3000/signup
// // http post :3000/signup usernmae=john password=foo
// app.post('/signup', async(req, res) => {


//   try {
//     req.body.password = await bcrypt.hash(req.body.password, 10);
//     const user = new Users(req.body);
//     const record = await user.save(req.body);
//     res.status(200).json(record);
//   } catch (e) { res.status(403).send("Error Creating User"); }
// });


// // Signin Route -- login with username and password
// // test with httpie
// // http post :3000/signin -a john:foo
// app.post('/signin', async(req, res) => {

//   // ----------------------------
//   let basicHeader = req.headers.authorization.split(' ')
//   let encoded = basicHeader.pop() //index[1]
//   let decoded = base64.decode(encoded) //result username:password
//   let [username, password] = decoded.split(':');
//   //get value from DB
//   const user = await UsermModle.findOne({ username: username })

//   // then compare
//   const valid = await bcrypt.compare(password, user.password)

//   if (valid) {
//     //if true --->its valid
//     res.status(200).json(user)
//   } else {
//     //if false---->not authorized res.status(403).send(not authorized)
//     res.status(403).send('wrong username or password')
//   }



//   // -----------------------------------
//   /*
//     req.headers.authorization is : "Basic sdkjdsljd="
//     To get username and password from this, take the following steps:
//       - Turn that string into an array by splitting on ' '
//       - Pop off the last value
//       - Decode that encoded string so it returns to user:pass
//       - Split on ':' to turn it into an array
//       - Pull username and password from that array
//   */

//   let basicHeaderParts = req.headers.authorization.split(' '); // ['Basic', 'sdkjdsljd=']
//   let encodedString = basicHeaderParts.pop(); // sdkjdsljd=
//   let decodedString = base64.decode(encodedString); // "username:password"
//   let [username, password] = decodedString.split(':'); // username, password

//   /*
//     Now that we finally have username and password, let's see if it's valid
//     1. Find the user in the database by username
//     2. Compare the plaintext password we now have against the encrypted password in the db
//        - bcrypt does this by re-encrypting the plaintext password and comparing THAT
//     3. Either we're valid or we throw an error
//   */
//   try {
//     const user = await Users.findOne({ username: username })
//     const valid = await bcrypt.compare(password, user.password);
//     if (valid) {
//       res.status(200).json(user);
//     } else {
//       throw new Error('Invalid User')
//     }
//   } catch (error) { res.status(403).send("Invalid Login"); }

// });

// mongoose.connect('mongodb://localhost:27017/auth', { useNewUrlParser: true, useUnifiedTopology: true })
//   .then(() => {
//     app.listen(3000, () => console.log('server up'));
//   })
//   .catch(e => console.error('Could not start server', e.message));